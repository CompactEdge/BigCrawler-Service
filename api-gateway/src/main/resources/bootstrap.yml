server.port: 8083
---
spring:
  profiles: dev
  # main:
  #   banner-mode: console
  output.ansi.enabled: always
  devtools:
    add-properties: true
    livereload.enabled: true
    restart.enabled: true

  application.name: gateway
  # https://spring.io/blog/2019/08/16/securing-services-with-spring-cloud-gateway

  autoconfigure:
    # TODO: remove when fixed https://github.com/spring-projects/spring-security/issues/6314
    exclude: org.springframework.boot.actuate.autoconfigure.security.reactive.ReactiveManagementWebSecurityAutoConfiguration

  security:
    oauth2:
      client:
        provider:
          keycloak:
            token-uri: http://localhost:9000/auth/realms/master/protocol/openid-connect/token
            authorization-uri: http://localhost:9000/auth/realms/master/protocol/openid-connect/auth
            userinfo-uri: http://localhost:9000/auth/realms/master/protocol/openid-connect/userinfo
            user-name-attribute: preferred_username
        registration:
          keycloak-client:
            provider: keycloak
            client-id: console-admin
            client-secret: 0e96d52a-0ddf-43b6-ad64-d7e81c1c7caf # http://keycloak:9000/auth/admin/master/console/#/realms/master/clients/
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/keycloak"

  cloud:
    gateway:
      globalcors:
        cors-configurations:
          "[/**]":
            allowedOrigins: "*"
            # allowedMethods: "*"
            allowedMethods:
            - GET
            - POST
            - PUT
            - PATCH
            - DELETE
      # discovery: # k8s
      #   locator:
      #     enabled: true
      #     lower-case-service-id: true
      #     url-expression: "'http://'+serviceId"
      # route-id-prefix:
      # predicates:
      # filters:
      # include-expression:
      routes:
        - id: service_bus
          predicates:
            - Path=/kube/**
          uri: http://127.0.0.1:7000
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
            - RewritePath=/kube/(?<segment>/?.*), /api/v1/$\{segment}
            - TokenRelay=
            - RemoveRequestHeader=Cookie
        - id: prometheus_query
          predicates:
            - Path=/prom/**
          uri: http://127.0.0.1:9090
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
            - AddResponseHeader=Access-Control-Allow-Origin, *
            - RewritePath=/prom/(?<segment>/?.*), /api/v1/query?query=$\{segment}
        - id: prometheus_query_range
          predicates:
            - Path=/promr/**
          uri: http://127.0.0.1:9090
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
            - AddResponseHeader=Access-Control-Allow-Origin, *
            - RewritePath=/promr/(?<segment>/?.*), /api/v1/query_range?query=$\{segment}
    # kubernetes:
    #   reload:
    #     enabled: true
    #     mode: polling
    #     period: 5000
    #   discovery:
    #     enabled: true
    #     all-namespaces: true
    # known-secure-ports:
    # metadata:
    #   labels-prefix:
    #   add-labels:
    # order:
    # service-labels:
    # service-name:
    # filter: "metadata.labels['compact-edge']"

management:
  # server:
  #   port: 8083
  endpoint:
    gateway:
      enabled: true
    health:
      enabled: true
      show-details: always
      show-components: always
      # show-details: never
      # show-components: never
  endpoints:
    web:
      exposure:
        include: health,gateway,metrics
# http://localhost:8083/actuator/health
# http://localhost:8083/actuator/gateway/routes
# http://localhost:8083/actuator/metrics/gateway.requests
# http://localhost:8083/actuator/metrics/gateway.requests?tag=routeUri:http://127.0.0.1:7000

logging.level:
  root: info
  org:
    springframework:
      cloud:
        gateway: trace
        loadbalancer: debug
        # kubernetes: debug
  reactor:
    netty:
      http:
        server: debug
        client: debug
