server:
  port: 8083
---
spring:
  profiles: dev
  # main:
  #   banner-mode: console
  output:
    ansi:
      enabled: always
  devtools:
    livereload:
      enabled: true
    restart:
      enabled: true

    add-properties: true
  application:
    name: gateway
  # https://spring.io/blog/2019/08/16/securing-services-with-spring-cloud-gateway
  security:
    oauth2:
      client:
        registration:
          messaging-client-oidc:
            provider: auth-server
            client-id: api-gateway
            client-secret: secret
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: openid
            client-name: messaging-client-oidc
          messaging-client-authorization-code:
            provider: auth-server
            client-id: api-gateway
            client-secret: secret
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/authorized"
            scope: message.read,message.write
            client-name: messaging-client-authorization-code
          messaging-client-client-credentials:
            provider: auth-server
            client-id: api-gateway
            client-secret: secret
            authorization-grant-type: client_credentials
            scope: message.read,message.write
            client-name: messaging-client-client-credentials
        provider:
          auth-server:
            issuer-uri: http://auth-server:9000
  cloud:
    gateway:
      globalcors:
        cors-configurations:
          "[/**]":
            allowedOrigins: "*"
            # allowedMethods: "*"
            allowedMethods:
              - GET
            # - POST
            # - PUT
            # - PATCH
            # - DELETE
      # discovery: # k8s
      #   locator:
      #     enabled: true
      #     lower-case-service-id: true
      #     url-expression: "'http://'+serviceId"
      # route-id-prefix:
      # predicates:
      # filters:
      # include-expression:
      routes:
        # - id: auth_server
        #   uri: http://127.0.0.1:9000
        #   predicates:
        #     - Path=/oauth2/**
        #     # - Path=/oauth2/authorization/messaging-client-oidc
        #   filters:
        #     - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        #     - RewritePath=/(?<segment>/?.*), /$\{segment}
        #     - TokenRelay=
        #     - RemoveRequestHeader=Cookie
        - id: service_bus
          uri: http://127.0.0.1:7000
          predicates:
            - Path=/kube/**
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
            - RewritePath=/kube/(?<segment>/?.*), /api/v1/$\{segment}
        - id: prometheus_query
          uri: http://127.0.0.1:9090
          predicates:
            - Path=/prom/**
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
            - AddResponseHeader=Access-Control-Allow-Origin, *
            - RewritePath=/prom/(?<segment>/?.*), /api/v1/query?query=$\{segment}
        - id: prometheus_query_range
          uri: http://127.0.0.1:9090
          predicates:
            - Path=/promr/**
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
            - AddResponseHeader=Access-Control-Allow-Origin, *
            - RewritePath=/promr/(?<segment>/?.*), /api/v1/query_range?query=$\{segment}
    # kubernetes:
    #   reload:
    #     enabled: true
    #     mode: polling
    #     period: 5000
    #   discovery:
    #     enabled: true
    #     all-namespaces: true
    # known-secure-ports:
    # metadata:
    #   labels-prefix:
    #   add-labels:
    # order:
    # service-labels:
    # service-name:
    # filter: "metadata.labels['compact-edge']"

management:
  # server:
  #   port: 8083
  endpoint:
    gateway:
      enabled: true
    health:
      enabled: true
      show-details: always
      show-components: always
      # show-details: never
      # show-components: never
  endpoints:
    web:
      exposure:
        include: health,gateway,metrics
# http://localhost:8083/actuator/health
# http://localhost:8083/actuator/gateway/routes
# http://localhost:8083/actuator/metrics/gateway.requests
# http://localhost:8083/actuator/metrics/gateway.requests?tag=routeUri:http://127.0.0.1:7000

logging:
  level:
    root: info
    org:
      springframework:
        cloud:
          gateway: trace
          loadbalancer: debug
          # kubernetes: debug
    reactor:
      netty:
        http:
          server: debug
          client: debug
